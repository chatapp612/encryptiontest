{"version":3,"sources":["components/App.js","components/AddContactPage.js","components/Home.js","components/MainApp.js","index.js","contexts/Web3Context.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","RC4","key","_classCallCheck","state","j","initialize","_createClass","_toConsumableArray","map","char","charCodeAt","_ref","input","output","k","_ref2","byte","message","encrypted","process","Buffer","from","toString","encryptedMessage","encryptedBytes","decrypted","String","fromCharCode","apply","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","senders","setSenders","_useState9","_useState10","selectedSender","setSelectedSender","location","useLocation","navigate","useNavigate","_useWeb","useWeb3","contract","account","username","useEffect","fetchMessages","deriveEncryptionKey","_ref3","_asyncToGenerator","_callee","recipientPublicKeyHex","privateKeyHex","recipientPublicKey","privateKey","rawSecret","derivedKey","key1","key2","_context","console","log","methods","getPublicKey","localStorage","getItem","concat","sodium","from_hex","crypto_scalarmult","to_hex","crypto_kdf_derive_from_key","setItem","t0","error","arguments","sendMessage","_ref4","_callee2","sessionKeyHex","rc4","encryptedmessage","gasEstimate","_context2","alert","encrypt","estimateGas","send","gas","_ref5","_callee3","receivedMessages","uniqueSenders","_context3","fetchMessagesForLoggedInAccount","Set","msg","sender","fetchMessagesForSender","_ref6","_callee4","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_iterator","_step","sessionKeyHex1","_context4","_objectSpread","timestamp","direction","sort","b","_createForOfIteratorHelper","content","decrypt","t1","_x","React","createElement","className","onClick","index","Date","toLocaleString","onChange","target","placeholder","AddContactPage","web3","showBox","setShowBox","setName","contacts","setContacts","fetchContacts","accounts","contactsData","eth","getAccounts","getContacts","handleSave","encryptedAddress","utils","keccak256","addContact","toggleBox","onClose","contact","toHex","require","Home","setOpen","setUsername","password","setPassword","setError","isRegistered","setIsRegistered","_useState11","_useState12","currentUsername","setCurrentUsername","_useState13","_useState14","checkIfRegistered","existingUsername","getUsername","generateKeys","keyPair","publicKeyHex","blob","url","link","ready","crypto_kx_keypair","publicKey","Blob","URL","createObjectURL","document","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleSignUpSubmit","registerUser","updatePublicKey","handleLogin","hashedPassword","_username","storedHashedPassword","passwordValid","getPasswordHash","Fragment","style","color","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","Web3Provider","HashRouter","getElementById","Web3Context","createContext","useContext","children","setWeb3","setContract","setAccount","web3Instance","networkId","deployedNetwork","contractInstance","window","ethereum","Web3","request","net","getId","MessageStoreContract","networks","Contract","abi","address","initWeb3","Provider"],"mappings":"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","file":"static/js/main.69ea4c07.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js';\nimport crypto from 'crypto';\nimport sodium from \"libsodium-wrappers\";\n\nclass RC4 {\n    constructor(key) {\n        this.key = key;\n        this.state = [];\n        this.i = 0;\n        this.j = 0;\n        this.initialize();\n    }\n\n    initialize() {\n        const key = [...this.key].map((char) => char.charCodeAt(0));\n        for (let i = 0; i < 256; i++) this.state[i] = i;\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + this.state[i] + key[i % key.length]) % 256;\n            [this.state[i], this.state[j]] = [this.state[j], this.state[i]];\n        }\n    }\n\n    process(input) {\n        const output = [];\n        for (let k = 0; k < input.length; k++) {\n            this.i = (this.i + 1) % 256;\n            this.j = (this.j + this.state[this.i]) % 256;\n            [this.state[this.i], this.state[this.j]] = [this.state[this.j], this.state[this.i]];\n            const byte = this.state[(this.state[this.i] + this.state[this.j]) % 256];\n            output.push(input[k] ^ byte);\n        }\n        return output;\n    }\n\n    encrypt(message) {\n        const input = [...message].map((char) => char.charCodeAt(0));\n        const encrypted = this.process(input);\n        return Buffer.from(encrypted).toString('hex');\n    }\n\n    decrypt(encryptedMessage) {\n        const encryptedBytes = Buffer.from(encryptedMessage, 'hex');\n        const decrypted = this.process([...encryptedBytes]);\n        return String.fromCharCode(...decrypted);\n    }\n}\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const { contract, account } = useWeb3();\n    const username = (location.state && location.state.username) ? location.state.username : 'Guest';\n\n    useEffect(() => {\n        if (contract && account) {\n            fetchMessages();\n        }\n    }, [contract, account]);\n\n    \n    \n  //******************************************************************************************************************************************* */  \n  const deriveEncryptionKey = async () => {\n    try {\n        console.log(\"inside derivekeyfunc\");\n        // Fetch the recipient's public key from the smart contract using the recipient state\n        const recipientPublicKeyHex = await contract.methods.getPublicKey(recipient).call({ from: account });\n        console.log(\"public key of recipient:\",recipientPublicKeyHex);\n        // Retrieve your private key from local storage using your account address\n        const privateKeyHex = localStorage.getItem(`privateKey-${account}`);\nconsole.log(\"my pvt key:\",privateKeyHex);\n        if (!privateKeyHex) {\n            throw new Error(\"Private key not found in localStorage.\");\n        }\n\n        // Convert hex keys to Uint8Array\n        const recipientPublicKey = sodium.from_hex(recipientPublicKeyHex);\n        \n        const privateKey = sodium.from_hex(privateKeyHex);\n        console.log(\"converted pvt key from hex to uint8\",privateKey);\n        // Calculate the shared secret using your private key and the recipient's public key\n        const rawSecret = sodium.crypto_scalarmult(privateKey, recipientPublicKey);\n\n        console.log(\"Derived Shared Secret (Hex format):\", sodium.to_hex(rawSecret));\n\n        \n        console.log(\"raw secret type:\",rawSecret);\n\n\n\n// Step 3: Use the first 32 bytes of the resulting HMAC as the derived key\nconst subkey_len = 32; // Desired length of the derived key in bytes\n        const subkey_id = 1; // Use a unique subkey ID, for example, 1 or based on account/recipient\n        const ctx = 'encryption'; // Context string, which can be any relevant string like \"encryption\"\n\n        const derivedKey = sodium.crypto_kdf_derive_from_key(subkey_len, subkey_id, ctx, rawSecret);\n       console.log(\"Derived Encryption Key (Hex format):\", sodium.to_hex(derivedKey));\n        \n\n        const key1 = `${account}_${recipient}`;\n        const key2 = `${recipient}_${account}`;\n    \n        // Store the derived key in local storage for both combinations\n        localStorage.setItem(key1, sodium.to_hex(derivedKey));\n        localStorage.setItem(key2, sodium.to_hex(derivedKey));\n    \n        console.log(`Derived encryption key stored for ${key1} and ${key2}`);\n\n\n        return sodium.to_hex(derivedKey); // Return the derived encryption key\n    } catch (error) {\n        console.error(\"Error deriving encryption key:\", error);\n    }\n};\n\n\n  \n\n  //******************************************************************************************************************************************* */  \n\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n    \n        if (contract) {\n            try {\n                console.log(\"in send msg\");\n\n\n              \n            let sessionKeyHex =  localStorage.getItem(`${account}_${recipient}`) ||\n            localStorage.getItem(`${recipient}_${account}`);\n\n\n\n            if (!sessionKeyHex) {\n                console.log(\"Session key not found, deriving a new one...\");\n                sessionKeyHex = await deriveEncryptionKey();\n                \n            \n            }\n            console.log(\"SESSIONKEY\",sessionKeyHex);\n                const rc4 = new RC4(sessionKeyHex);\n                const encryptedmessage = rc4.encrypt(message);\n\n                \n                const gasEstimate = await contract.methods.sendMessage(recipient, encryptedmessage).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, encryptedmessage).send({ from: account, gas: gasEstimate + 100000 });\n    \n                alert(\"Message sent successfully!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages();\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n\n\n\n\n    \n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'received',\n                }));\n\n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'sent',\n                }));\n\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n\n                for (let msg of combinedMessages) {\n                    let sessionKeyHex1 = localStorage.getItem(`${account}_${recipient}`) ||\n                    localStorage.getItem(`${recipient}_${account}`);\n        \n                    if(!sessionKeyHex1){\n                        console.log(\"Session key not found, deriving a new one to fetch msgs...\");\n                sessionKeyHex1 = await deriveEncryptionKey();\n                    }\n                    \n                        console.log(\"SESSION KEY IN FETCH MSG\",sessionKeyHex1)\n                         // For all messages, decrypt as usual\n                       console.log(\"encrypted msg that is fetched from block\", msg.content);\n                       const rc4 = new RC4(sessionKeyHex1);\n                       // Decrypt the content\n                       msg.content = rc4.decrypt(msg.content);\n                       console.log(\"message content decrypted in plaintext\", msg.content);\n                   \n                    \n                       \n                    \n                }\n\n                setAllMessages(combinedMessages);\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n\n\n\n    const goToAddContactPage = () => {\n        navigate('/add-contact');\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <h2>Welcome, {username}</h2>\n                <p>Your Ethereum address: {account}</p>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleString()}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages to display</li>\n                        )}\n                    </ul>\n                </div>\n\n                <div className=\"message-form\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Recipient address\"\n                    />\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter your message\"\n                    />\n                    <button onClick={sendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// AddContactPage.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst AddContactPage = ({ web3, contract }) => {\n    const [showBox, setShowBox] = useState(false);\n    const [name, setName] = useState('');\n    const [recipient, setRecipient] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    useEffect(() => {\n        if (contract) {\n            fetchContacts();\n        }\n    }, [contract]);\n\n    const fetchContacts = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const contactsData = await contract.methods.getContacts().call({ from: accounts[0] });\n        setContacts(contactsData);\n    };\n\n    const handleSave = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const encryptedAddress = web3.utils.keccak256(recipient); // Example encryption, adjust as needed\n        await contract.methods.addContact(name, encryptedAddress).send({ from: accounts[0] });\n        setName('');\n        setRecipient('');\n        setShowBox(false);\n        fetchContacts(); // Refresh contacts after saving\n    };\n\n    const toggleBox = () => {\n        setShowBox(!showBox);\n    };\n\n    const CenteredBox = ({ onClose }) => {\n        return (\n            <div className=\"overlay\">\n                <div className=\"box\">\n                    <h2>Add Contact</h2>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Enter Name\"\n                            className=\"name-input\"\n                        />\n                    </div>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={recipient}\n                            onChange={(e) => setRecipient(e.target.value)}\n                            placeholder=\"Enter Recipient Ethereum Address\"\n                            className=\"add-contact-recipient-input\"\n                        />\n                    </div>\n                    <div className=\"button-group\">\n                        <button onClick={handleSave} className=\"save-button\">Save</button>\n                        <button onClick={onClose} className=\"cancel-button\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"add-contact-page\">\n            <div className=\"chat-header\">\n                <h2>Contact List</h2>\n                <button onClick={toggleBox} className=\"addcontact-button\">Add New Contact</button>\n            </div>\n            {showBox && <CenteredBox onClose={toggleBox} />}\n            <div className=\"contact-list\">\n                {contacts.map((contact, index) => (\n                    <div key={index} className=\"contact-item\">\n                        {contact.name} - {web3.utils.toHex(contact.encryptedAddress)} {/* Adjust as necessary */}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default AddContactPage;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import the custom hook for web3 context\nimport Web3 from 'web3'; // Import Web3 to generate keys\nimport { sha256 } from 'js-sha256'; // Hash function to simulate randomness based on the address\nimport sodium from \"libsodium-wrappers\";\n\n\nconst crypto = require('crypto');\n    const fs = require('fs');\n\n\n\n\nconst Home = () => {\n    const [open, setOpen] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState(''); // New state for password\n    const [error, setError] = useState('');\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [currentUsername, setCurrentUsername] = useState('');\n    const [currentAccount, setCurrentAccount] = useState('');\n    \n    const { web3, contract, account } = useWeb3(); // Access web3, contract, and account from the context\n    const navigate = useNavigate();\n    const secp256k1 = require(\"secp256k1\");\n    // Check if user is already registered on page load\n    useEffect(() => {\n        if (account && contract) {\n            checkIfRegistered();\n        }\n    }, [account, contract]);\n\n\n\n\n\n    const checkIfRegistered = async () => {\n        try {\n            const existingUsername = await contract.methods.getUsername().call({ from: account });\n            if (existingUsername) {\n                setCurrentUsername(existingUsername);\n                setIsRegistered(true);\n                 \n    \n                 \n \n            } else {\n                setIsRegistered(false);\n            }\n        } catch (error) {\n            console.error(\"Error checking registration status:\", error);\n            setError(\"Failed to check registration status.\");\n        }\n    };\n\n    const handleSignUpOpen = () => {\n        setOpen(true);\n    };\n\n  \n    \nconst generateKeys = async () => {\n    // Initialize Sodium\n    await sodium.ready;\n\n    const keyPair = sodium.crypto_kx_keypair();\nconsole.log(\"keypairs generated\");\n    // Convert public and private keys to hexadecimal\n    const publicKeyHex = sodium.to_hex(keyPair.publicKey);\n    const privateKeyHex = sodium.to_hex(keyPair.privateKey);\n\n    console.log(\"Generated Public Key (Hex format):\", publicKeyHex);\n    console.log(\"Generated Private Key (Hex format):\", privateKeyHex);\n    console.log(\"my public keytype:\",typeof(publicKeyHex));\n\n    // Store private key in local storage, using the account address as the key\n    localStorage.setItem(`privateKey-${account}`, privateKeyHex);\n    console.log(`Private key for ${account} stored in local storage!`);\n\n    // Provide a download option for the private key\n    const blob = new Blob([privateKeyHex], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"private_key.txt\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url); // Release the URL object after download\n\n    return publicKeyHex; // Return the public key\n};\n\nconst handleSignUpSubmit = async () => {\n    if (!username || !password) { // Validate username and password\n        setError('Username and Password are required');\n        return;\n    }\n    try {\n        // Generate the public and private keys\n        const publicKeyHex = await generateKeys(); // Await for the generated public key in hex format\n        \n\n        // Register the user on the blockchain with the username and public key\n        await contract.methods.registerUser(username, publicKeyHex, password).send({ from: account });\n        // Store the public key on the blockchain if needed\n        await contract.methods.updatePublicKey(publicKeyHex).send({ from: account });\n        console.log(\"public key stored on block\");\n\n        setOpen(false);\n        navigate('/app', { state: { account, username } }); // Navigate to the main app with account and username\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        setError(\"Registration failed. Please try again.\");\n    }\n};\n\n\n    const handleLogin = async () => {\n        if (!password) { // Validate password\n            setError('Password is required for login');\n            return;\n        }\n        try {\n            console.log(\"Password entered by user:\", password);\n            console.log(\"before password validate\");\n\n            // Hash the password entered by the user\n            const hashedPassword = web3.utils.keccak256(password);\n    \n            // Print the hashed password to the console\n            console.log(\"Hashed password generated by user:\", hashedPassword);\n    \n            // Fetch the username associated with the account\n            const username = await contract.methods.getUsername().call({ from: account });\n            console.log(\"Username from contract:\", username);\n    \n            // Fetch the stored password hash from the smart contract for the logged-in account\n            const storedHashedPassword = await contract.methods.getPasswordHash(account).call();\n            console.log(\"Hashed password stored in the contract:\", storedHashedPassword);\n    \n            // Validate the password by comparing the hashes\n            const passwordValid = hashedPassword === storedHashedPassword;\n            console.log(\"Password valid:\", passwordValid); // This will print `true` or `false` based on comparison\n    \n            if (passwordValid) {\n                console.log(\"Password is valid. User login successful.\");\n\n                setCurrentUsername(username);\n                navigate('/app', { state: { account, username } });\n               \n                console.log(\"Final\")\n               \n    \n                \n    \n            } else {\n                setError('Invalid password');\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            setError(\"Login failed. Please try again.\");\n        }\n    };\n    return (\n        <div>\n            <h1>Welcome to the Chat App</h1>\n            {!isRegistered ? (\n                <>\n                    <h2>Sign Up</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleSignUpSubmit}>Sign Up</button>\n                </>\n            ) : (\n                <>\n                    <h2>Welcome Back, {currentUsername}!</h2>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter Password to Login\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleLogin}>Login</button>\n                </>\n            )}\n            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Error handling */}\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport App from './App';\nimport AddContactPage from './AddContactPage'; \nimport Home from './Home'; \nconst MainApp = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/app\" element={<App />} />\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\n        </Routes>\n    );\n};\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\nimport MainApp from './components/MainApp'; // Main App\nimport { Web3Provider } from './contexts/Web3Context'; // Import Web3Context\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <HashRouter>\n        <MainApp />\n      </HashRouter>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json'; // Import the ABI\n\n// Create the Web3 context\nconst Web3Context = createContext();\n\n// Custom hook to access the Web3Context\nexport const useWeb3 = () => {\n    return useContext(Web3Context);\n};\n\n// Web3Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            if (window.ethereum) {\n                try {\n                    const web3Instance = new Web3(window.ethereum);\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n\n                    const networkId = await web3Instance.eth.net.getId();\n                    const deployedNetwork = MessageStoreContract.networks[networkId];\n                    if (deployedNetwork) {\n                        const contractInstance = new web3Instance.eth.Contract(MessageStoreContract.abi, deployedNetwork.address);\n                        setWeb3(web3Instance);\n                        setContract(contractInstance);\n                    } else {\n                        console.error(\"Contract not deployed on this network\");\n                    }\n                } catch (error) {\n                    console.error(\"Web3 initialization failed:\", error);\n                }\n            }\n        };\n\n        initWeb3();\n    }, []);\n\n    return (\n        <Web3Context.Provider value={{ web3, contract, account }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n"],"sourceRoot":""}