{"version":3,"sources":["components/App.js","components/Home.js","components/AddContactPage.js","components/MainApp.js","index.js","contexts/Web3Context.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","forge","require","RC4","key","_classCallCheck","state","j","initialize","_createClass","_toConsumableArray","map","char","charCodeAt","_ref","input","output","k","_ref2","byte","message","encrypted","process","Buffer","from","toString","encryptedMessage","encryptedBytes","decrypted","String","fromCharCode","apply","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","senders","setSenders","_useState9","_useState10","selectedSender","setSelectedSender","location","useLocation","navigate","useNavigate","_useWeb","useWeb3","contract","account","username","useEffect","fetchMessages","generateSessionKey","recipientPublicKey","randomValue","crypto","randomBytes","concat","encryptSessionKey","sessionKey","buffer","startsWith","publicEncrypt","console","error","convertPublicKeyToPem","publicKeyString","publicKeyBuffer","publicKey","pki","publicKeyFromPem","publicKeyToPem","sendMessage","_ref3","_asyncToGenerator","_callee","recipientPublicKeyPem","rc4","encryptedSessionKey","gasEstimate","_context","alert","methods","getPublicKey","log","encrypt","storeSessionKey","send","estimateGas","gas","t0","arguments","_ref4","_callee2","receivedMessages","uniqueSenders","_context2","fetchMessagesForLoggedInAccount","Set","msg","sender","fetchMessagesForSender","_ref5","_callee3","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_iterator","_step","_context3","_objectSpread","timestamp","direction","sort","b","_createForOfIteratorHelper","getSessionKey","content","decrypt","t1","_x","React","createElement","className","onClick","index","Date","toLocaleTimeString","hour","minute","onChange","target","placeholder","Home","setOpen","setUsername","password","setPassword","setError","isRegistered","setIsRegistered","_useState11","_useState12","currentUsername","setCurrentUsername","_useState13","_useState14","web3","checkIfRegistered","existingUsername","getUsername","generateKeys","_generateKeys","_callee5","keyPair","publicKeyBase64","publicKeyPem","privateKey","privateKeyBase64","privateKeyPem","_context5","window","subtle","generateKey","modulusLength","publicExponent","Uint8Array","hash","exportKey","match","join","handleSignUpSubmit","registerUser","updatePublicKey","handleLogin","hashedPassword","_username","storedHashedPassword","passwordValid","utils","keccak256","getPasswordHash","Fragment","style","color","AddContactPage","showBox","setShowBox","setName","contacts","setContacts","fetchContacts","accounts","contactsData","eth","getAccounts","getContacts","handleSave","encryptedAddress","addContact","toggleBox","onClose","contact","toHex","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","Web3Provider","HashRouter","document","getElementById","Web3Context","createContext","useContext","children","setWeb3","setContract","setAccount","web3Instance","networkId","deployedNetwork","contractInstance","ethereum","Web3","request","net","getId","MessageStoreContract","networks","Contract","abi","address","initWeb3","Provider"],"mappings":"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","file":"static/js/main.6ba3439d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import Web3 context hook\nimport crypto from 'crypto';\nconst forge = require('node-forge');\n\n// RC4 encryption/decryption class\nclass RC4 {\n    constructor(key) {\n        this.key = key;\n        this.state = [];\n        this.i = 0;\n        this.j = 0;\n        this.initialize();\n    }\n\n    // Initialize the RC4 cipher with the key\n    initialize() {\n        const key = [...this.key].map((char) => char.charCodeAt(0)); // Convert key to an array of byte values\n        for (let i = 0; i < 256; i++) {\n            this.state[i] = i;\n        }\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + this.state[i] + key[i % key.length]) % 256;\n            [this.state[i], this.state[j]] = [this.state[j], this.state[i]]; // Swap values\n        }\n    }\n\n    // RC4 encryption or decryption\n    process(input) {\n        const output = [];\n        for (let k = 0; k < input.length; k++) {\n            this.i = (this.i + 1) % 256;\n            this.j = (this.j + this.state[this.i]) % 256;\n            [this.state[this.i], this.state[this.j]] = [this.state[this.j], this.state[this.i]];\n            const byte = this.state[(this.state[this.i] + this.state[this.j]) % 256];\n            output.push(input[k] ^ byte); // XOR with byte from the state\n        }\n        return output;\n    }\n\n    encrypt(message) {\n        const input = [...message].map((char) => char.charCodeAt(0)); // Convert message to byte array\n        const encrypted = this.process(input);\n        return Buffer.from(encrypted).toString('hex'); // Return as hex string\n    }\n\n    decrypt(encryptedMessage) {\n        const encryptedBytes = Buffer.from(encryptedMessage, 'hex');\n        const decrypted = this.process([...encryptedBytes]);\n        return String.fromCharCode(...decrypted); // Convert byte array back to string\n    }\n}\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const { contract, account } = useWeb3(); // Use contract and account from Web3Context\n    var username = (location.state && location.state.username) ? location.state.username : 'Guest';\n\n    useEffect(() => {\n        if (contract && account) {\n            fetchMessages();\n        }\n    }, [contract, account]);\n\n    const generateSessionKey = (recipientPublicKey) => {\n        const randomValue = crypto.randomBytes(16).toString('hex'); // Generate random 16-byte value\n        const sessionKey = `${recipientPublicKey}${randomValue}`; // Combine public key with random value\n        return sessionKey;\n    };\n\n    const encryptSessionKey = (sessionKey, recipientPublicKey) => {\n        try {\n            // Convert the session key to a buffer (utf-8 encoding)\n            const buffer = Buffer.from(sessionKey, 'utf-8');\n    \n            // Check if recipientPublicKey is valid\n            if (!recipientPublicKey) {\n                console.error(\"Recipient public key is null or undefined.\");\n                return;\n            }\n    \n            // The public key should be in PEM format, so ensure it is a string and valid.\n            if (typeof recipientPublicKey !== 'string' || !recipientPublicKey.startsWith('-----BEGIN PUBLIC KEY-----')) {\n                console.error(\"Invalid public key format. The key must be in PEM format.\");\n                return;\n            }\n    \n            // Encrypt the session key using the recipient's public key\n            const encrypted = crypto.publicEncrypt(\n                recipientPublicKey,  // PEM format public key\n                buffer               // Session key buffer\n            );\n    \n            // Return the encrypted session key in hex format\n            return encrypted.toString('hex');\n        } catch (error) {\n            console.error(\"Error in encrypting session key:\", error);\n        }\n    };\n    \n    \n    \n    function convertPublicKeyToPem(publicKeyString) {\n        // If the public key is in hexadecimal format, convert it to a binary array (buffer)\n        const publicKeyBuffer = Buffer.from(publicKeyString, 'hex');\n        \n        // Create a Forge public key object from the binary data\n        const publicKey = forge.pki.publicKeyFromPem(publicKeyBuffer.toString('utf8'));\n    \n        // Convert the key to PEM format\n        const pemFormattedPublicKey = forge.pki.publicKeyToPem(publicKey);\n        \n        return pemFormattedPublicKey;\n    }\n    \n\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n    \n        if (contract) {\n            try {\n                // Fetch the recipient's public key in hex format\n                const recipientPublicKey = await contract.methods.getPublicKey(recipient).call({ from: account });\n                console.log(\"Recipient Address:\", recipient);\n                console.log(\"Fetched Public Key:\", recipientPublicKey);\n    \n                // Convert the public key from hex to PEM format\n                const recipientPublicKeyPem = convertPublicKeyToPem(recipientPublicKey);\n                console.log(\"Converted Public Key to PEM format:\", recipientPublicKeyPem);\n    \n                // Generate session key using recipient's PEM public key\n                const sessionKey = generateSessionKey(recipientPublicKeyPem);\n                console.log(\"Generated Session Key:\", sessionKey);\n    \n                // Encrypt the message with the session key using RC4\n                const rc4 = new RC4(sessionKey);\n                const encryptedMessage = rc4.encrypt(message);\n                console.log(\"Encrypted Message:\", encryptedMessage);\n                \n                // Encrypt session key using recipient's PEM public key\n                const encryptedSessionKey = encryptSessionKey(sessionKey, recipientPublicKeyPem);\n                console.log(\"Encrypted Session Key:\", encryptedSessionKey);\n    \n                // Store the encrypted session key on the blockchain\n                await contract.methods.storeSessionKey(recipient, encryptedSessionKey).send({ from: account });\n    \n                // Send the encrypted message to the blockchain\n                const gasEstimate = await contract.methods.sendMessage(recipient, encryptedMessage).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, encryptedMessage).send({ from: account, gas: gasEstimate + 100000 });\n                alert(\"Message sent!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages(); // Refresh senders after sending a message\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n\n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n    \n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'received',\n                }));\n    \n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'sent',\n                }));\n    \n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n    \n                // For each message, get the session key from the contract and decrypt the message\n                for (let msg of combinedMessages) {\n                    const sessionKey = await contract.methods.getSessionKey(sender).call({ from: account });\n    \n                    // Use the session key to decrypt the message\n                    const rc4 = new RC4(sessionKey);\n                    msg.content = rc4.decrypt(msg.content);\n                }\n    \n                setAllMessages(combinedMessages);\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n\n    const goToAddContactPage = () => {\n        navigate('/add-contact');\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <h2>Welcome, {username}</h2>\n                <p>Your Ethereum address: {account}</p>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages found.</li>\n                        )}\n                    </ul>\n                </div>\n\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Enter Recipient Ethereum Address\"\n                        className=\"recipient-input\"\n                    />\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter your message\"\n                        className=\"message-input\"\n                    />\n                    <button onClick={sendMessage} className=\"send-button\">Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import the custom hook for web3 context\nimport Web3 from 'web3'; // Import Web3 to generate keys\nimport { sha256 } from 'js-sha256'; // Hash function to simulate randomness based on the address\nconst crypto = require('crypto');\n    const fs = require('fs');\n\n\n\n\n\nconst Home = () => {\n    const [open, setOpen] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState(''); // New state for password\n    const [error, setError] = useState('');\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [currentUsername, setCurrentUsername] = useState('');\n    const [currentAccount, setCurrentAccount] = useState('');\n    \n    const { web3, contract, account } = useWeb3(); // Access web3, contract, and account from the context\n    const navigate = useNavigate();\n    const secp256k1 = require(\"secp256k1\");\n    // Check if user is already registered on page load\n    useEffect(() => {\n        if (account && contract) {\n            checkIfRegistered();\n        }\n    }, [account, contract]);\n\n\n\n    async function generatePrivateKeyFromAddress() {\n        // Request access to the MetaMask account\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n    \n        // Get the current Ethereum address from MetaMask\n        const accounts = await web3.eth.getAccounts();\n        const accountAddress = accounts[0];\n    \n        console.log(\"MetaMask Ethereum Address:\", accountAddress);\n    \n        // Use the Ethereum address as a seed for generating a private key\n        // Hash the address to generate a 'random' private key (this is not cryptographically secure)\n        const pseudoRandomPrivateKey = sha256(accountAddress); // Hash the address to simulate randomness\n    \n        // Private key is derived from the hash - ensure it is in the expected format (remove 0x)\n        const privateKey = `0x${pseudoRandomPrivateKey.slice(0, 64)}`; // Slice to get the correct length (32 bytes)\n    \n        console.log(\"Generated Private Key (from address):\", privateKey);\n    \n        return privateKey;    }\n\n\n    const checkIfRegistered = async () => {\n        try {\n            const existingUsername = await contract.methods.getUsername().call({ from: account });\n            if (existingUsername) {\n                setCurrentUsername(existingUsername);\n                setIsRegistered(true);\n                 \n    \n                 \n \n            } else {\n                setIsRegistered(false);\n            }\n        } catch (error) {\n            console.error(\"Error checking registration status:\", error);\n            setError(\"Failed to check registration status.\");\n        }\n    };\n\n    const handleSignUpOpen = () => {\n        setOpen(true);\n    };\n\n  \n    \n    // Method to generate an RSA public/private key pair using the Web Crypto API\nasync function generateKeys() {\n    // Generate an RSA key pair\n    const keyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: { name: \"SHA-256\" },\n        },\n        true, // Whether the key is extractable (i.e., can be used outside the Web Crypto API)\n        [\"encrypt\", \"decrypt\"] // Key usages\n    );\n\n    // Export the public key to a PEM-like format (base64 encoded)\n    const publicKey = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const publicKeyBase64 = Buffer.from(publicKey).toString('base64');\n    const publicKeyPem = `-----BEGIN PUBLIC KEY-----\\n${publicKeyBase64.match(/.{1,64}/g).join('\\n')}\\n-----END PUBLIC KEY-----`;\n\n    console.log(\"Generated Public Key (PEM format):\", publicKeyPem);\n\n    // Export the private key to a PEM-like format (base64 encoded)\n    const privateKey = await window.crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    const privateKeyBase64 = Buffer.from(privateKey).toString('base64');\n    const privateKeyPem = `-----BEGIN PRIVATE KEY-----\\n${privateKeyBase64.match(/.{1,64}/g).join('\\n')}\\n-----END PRIVATE KEY-----`;\n\n    console.log(\"Generated Private Key (PEM format):\", privateKeyPem);\n\n    // Return the public key in hex string format if needed\n    return publicKeyPem;\n}\n\n\n    const handleSignUpSubmit = async () => {\n        if (!username || !password) { // Validate username and password\n            setError('Username and Password are required');\n            return;\n        }\n        try {\n            // Generate the public and private keys\n            const publicKey = generateKeys();\n            \n            console.log(publicKey);\n            // Register the user on the blockchain with the username and public key\n            await contract.methods.registerUser(username, publicKey, password).send({ from: account });\n// Store the public key on the blockchain if needed\nawait contract.methods.updatePublicKey(publicKey).send({ from: account });\n            setOpen(false);\n            navigate('/app', { state: { account, username } }); // Navigate to the main app with account and username\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            setError(\"Registration failed. Please try again.\");\n        }\n    };\n\n    const handleLogin = async () => {\n        if (!password) { // Validate password\n            setError('Password is required for login');\n            return;\n        }\n        try {\n            console.log(\"Password entered by user:\", password);\n            console.log(\"before password validate\");\n\n            // Hash the password entered by the user\n            const hashedPassword = web3.utils.keccak256(password);\n    \n            // Print the hashed password to the console\n            console.log(\"Hashed password generated by user:\", hashedPassword);\n    \n            // Fetch the username associated with the account\n            const username = await contract.methods.getUsername().call({ from: account });\n            console.log(\"Username from contract:\", username);\n    \n            // Fetch the stored password hash from the smart contract for the logged-in account\n            const storedHashedPassword = await contract.methods.getPasswordHash(account).call();\n            console.log(\"Hashed password stored in the contract:\", storedHashedPassword);\n    \n            // Validate the password by comparing the hashes\n            const passwordValid = hashedPassword === storedHashedPassword;\n            console.log(\"Password valid:\", passwordValid); // This will print `true` or `false` based on comparison\n    \n            if (passwordValid) {\n                console.log(\"Password is valid. User login successful.\");\n\n                setCurrentUsername(username);\n                navigate('/app', { state: { account, username } });\n               \n                console.log(\"Final\")\n               \n    \n                \n    \n            } else {\n                setError('Invalid password');\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            setError(\"Login failed. Please try again.\");\n        }\n    };\n    return (\n        <div>\n            <h1>Welcome to the Chat App</h1>\n            {!isRegistered ? (\n                <>\n                    <h2>Sign Up</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleSignUpSubmit}>Sign Up</button>\n                </>\n            ) : (\n                <>\n                    <h2>Welcome Back, {currentUsername}!</h2>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter Password to Login\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleLogin}>Login</button>\n                </>\n            )}\n            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Error handling */}\n        </div>\n    );\n};\n\nexport default Home;\n","// AddContactPage.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst AddContactPage = ({ web3, contract }) => {\n    const [showBox, setShowBox] = useState(false);\n    const [name, setName] = useState('');\n    const [recipient, setRecipient] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    useEffect(() => {\n        if (contract) {\n            fetchContacts();\n        }\n    }, [contract]);\n\n    const fetchContacts = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const contactsData = await contract.methods.getContacts().call({ from: accounts[0] });\n        setContacts(contactsData);\n    };\n\n    const handleSave = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const encryptedAddress = web3.utils.keccak256(recipient); // Example encryption, adjust as needed\n        await contract.methods.addContact(name, encryptedAddress).send({ from: accounts[0] });\n        setName('');\n        setRecipient('');\n        setShowBox(false);\n        fetchContacts(); // Refresh contacts after saving\n    };\n\n    const toggleBox = () => {\n        setShowBox(!showBox);\n    };\n\n    const CenteredBox = ({ onClose }) => {\n        return (\n            <div className=\"overlay\">\n                <div className=\"box\">\n                    <h2>Add Contact</h2>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Enter Name\"\n                            className=\"name-input\"\n                        />\n                    </div>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={recipient}\n                            onChange={(e) => setRecipient(e.target.value)}\n                            placeholder=\"Enter Recipient Ethereum Address\"\n                            className=\"add-contact-recipient-input\"\n                        />\n                    </div>\n                    <div className=\"button-group\">\n                        <button onClick={handleSave} className=\"save-button\">Save</button>\n                        <button onClick={onClose} className=\"cancel-button\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"add-contact-page\">\n            <div className=\"chat-header\">\n                <h2>Contact List</h2>\n                <button onClick={toggleBox} className=\"addcontact-button\">Add New Contact</button>\n            </div>\n            {showBox && <CenteredBox onClose={toggleBox} />}\n            <div className=\"contact-list\">\n                {contacts.map((contact, index) => (\n                    <div key={index} className=\"contact-item\">\n                        {contact.name} - {web3.utils.toHex(contact.encryptedAddress)} {/* Adjust as necessary */}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default AddContactPage;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport App from './App';\nimport AddContactPage from './AddContactPage'; \nimport Home from './Home'; \nconst MainApp = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/app\" element={<App />} />\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\n        </Routes>\n    );\n};\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\nimport MainApp from './components/MainApp'; // Main App\nimport { Web3Provider } from './contexts/Web3Context'; // Import Web3Context\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <HashRouter>\n        <MainApp />\n      </HashRouter>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json'; // Import the ABI\n\n// Create the Web3 context\nconst Web3Context = createContext();\n\n// Custom hook to access the Web3Context\nexport const useWeb3 = () => {\n    return useContext(Web3Context);\n};\n\n// Web3Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            if (window.ethereum) {\n                try {\n                    const web3Instance = new Web3(window.ethereum);\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n\n                    const networkId = await web3Instance.eth.net.getId();\n                    const deployedNetwork = MessageStoreContract.networks[networkId];\n                    if (deployedNetwork) {\n                        const contractInstance = new web3Instance.eth.Contract(MessageStoreContract.abi, deployedNetwork.address);\n                        setWeb3(web3Instance);\n                        setContract(contractInstance);\n                    } else {\n                        console.error(\"Contract not deployed on this network\");\n                    }\n                } catch (error) {\n                    console.error(\"Web3 initialization failed:\", error);\n                }\n            }\n        };\n\n        initWeb3();\n    }, []);\n\n    return (\n        <Web3Context.Provider value={{ web3, contract, account }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n"],"sourceRoot":""}