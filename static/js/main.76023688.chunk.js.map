{"version":3,"sources":["components/App.js","components/AddContactPage.js","components/Home.js","components/MainApp.js","index.js","contexts/Web3Context.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","RC4","key","_classCallCheck","state","j","initialize","_createClass","_toConsumableArray","map","char","charCodeAt","_ref","input","output","k","_ref2","byte","message","encrypted","process","Buffer","from","toString","encryptedMessage","encryptedBytes","decrypted","String","fromCharCode","apply","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","senders","setSenders","_useState9","_useState10","selectedSender","setSelectedSender","location","useLocation","navigate","useNavigate","_useWeb","useWeb3","contract","account","username","useEffect","fetchMessages","encryptSessionKey","sessionKey","recipientPublicKeyHex","console","error","buffer","crypto","publicEncrypt","padding","constants","RSA_PKCS1_PADDING","sendMessage","_ref3","_asyncToGenerator","_callee","rc4","encryptedSessionKey","gasEstimate","_context","alert","methods","getPublicKey","log","randomBytes","encrypt","storeSessionKey","send","estimateGas","gas","t0","arguments","_ref4","_callee2","receivedMessages","uniqueSenders","_context2","fetchMessagesForLoggedInAccount","Set","msg","sender","fetchMessagesForSender","_ref5","_callee3","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_iterator","_step","_context3","_objectSpread","timestamp","direction","concat","sort","b","_createForOfIteratorHelper","getSessionKey","content","decrypt","t1","_x","React","createElement","className","onClick","index","Date","toLocaleString","onChange","target","placeholder","AddContactPage","web3","showBox","setShowBox","setName","contacts","setContacts","fetchContacts","accounts","contactsData","eth","getAccounts","getContacts","handleSave","encryptedAddress","utils","keccak256","addContact","toggleBox","onClose","contact","toHex","require","Home","setOpen","setUsername","password","setPassword","setError","isRegistered","setIsRegistered","_useState11","_useState12","currentUsername","setCurrentUsername","_useState13","_useState14","checkIfRegistered","existingUsername","getUsername","generateKeys","_generateKeys","_callee5","keyPair","publicKeyBuffer","publicKeyHex","_context5","window","subtle","generateKey","modulusLength","publicExponent","Uint8Array","hash","exportKey","publicKey","Array","padStart","join","handleSignUpSubmit","registerUser","updatePublicKey","handleLogin","hashedPassword","_username","storedHashedPassword","passwordValid","getPasswordHash","Fragment","style","color","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","Web3Provider","HashRouter","document","getElementById","Web3Context","createContext","useContext","children","setWeb3","setContract","setAccount","web3Instance","networkId","deployedNetwork","contractInstance","ethereum","Web3","request","net","getId","MessageStoreContract","networks","Contract","abi","address","initWeb3","Provider"],"mappings":"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","file":"static/js/main.76023688.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useWeb3 } from '../contexts/Web3Context.js';\r\nimport crypto from 'crypto';\r\n\r\nclass RC4 {\r\n    constructor(key) {\r\n        this.key = key;\r\n        this.state = [];\r\n        this.i = 0;\r\n        this.j = 0;\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        const key = [...this.key].map((char) => char.charCodeAt(0));\r\n        for (let i = 0; i < 256; i++) this.state[i] = i;\r\n        let j = 0;\r\n        for (let i = 0; i < 256; i++) {\r\n            j = (j + this.state[i] + key[i % key.length]) % 256;\r\n            [this.state[i], this.state[j]] = [this.state[j], this.state[i]];\r\n        }\r\n    }\r\n\r\n    process(input) {\r\n        const output = [];\r\n        for (let k = 0; k < input.length; k++) {\r\n            this.i = (this.i + 1) % 256;\r\n            this.j = (this.j + this.state[this.i]) % 256;\r\n            [this.state[this.i], this.state[this.j]] = [this.state[this.j], this.state[this.i]];\r\n            const byte = this.state[(this.state[this.i] + this.state[this.j]) % 256];\r\n            output.push(input[k] ^ byte);\r\n        }\r\n        return output;\r\n    }\r\n\r\n    encrypt(message) {\r\n        const input = [...message].map((char) => char.charCodeAt(0));\r\n        const encrypted = this.process(input);\r\n        return Buffer.from(encrypted).toString('hex');\r\n    }\r\n\r\n    decrypt(encryptedMessage) {\r\n        const encryptedBytes = Buffer.from(encryptedMessage, 'hex');\r\n        const decrypted = this.process([...encryptedBytes]);\r\n        return String.fromCharCode(...decrypted);\r\n    }\r\n}\r\n\r\nconst App = () => {\r\n    const [recipient, setRecipient] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [allMessages, setAllMessages] = useState([]);\r\n    const [senders, setSenders] = useState([]);\r\n    const [selectedSender, setSelectedSender] = useState(null);\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const { contract, account } = useWeb3();\r\n    const username = (location.state && location.state.username) ? location.state.username : 'Guest';\r\n\r\n    useEffect(() => {\r\n        if (contract && account) {\r\n            fetchMessages();\r\n        }\r\n    }, [contract, account]);\r\n\r\n    const generateSessionKey = () => {\r\n        return crypto.randomBytes(16).toString('hex');\r\n    };\r\n\r\n    const encryptSessionKey = (sessionKey, recipientPublicKeyHex) => {\r\n        try {\r\n            if (!recipientPublicKeyHex) {\r\n                console.error(\"Recipient public key is null or undefined.\");\r\n                return;\r\n            }\r\n            const buffer = Buffer.from(sessionKey, 'utf-8');\r\n            const encrypted = crypto.publicEncrypt({ key: Buffer.from(recipientPublicKeyHex, 'hex'), padding: crypto.constants.RSA_PKCS1_PADDING }, buffer);\r\n            return encrypted.toString('hex');\r\n        } catch (error) {\r\n            console.error(\"Error in encrypting session key:\", error);\r\n        }\r\n    };\r\n\r\n    const sendMessage = async () => {\r\n        if (!recipient || !message) {\r\n            alert(\"Both recipient and message fields are required.\");\r\n            return;\r\n        }\r\n\r\n        if (contract) {\r\n            try {\r\n                const recipientPublicKeyHex = await contract.methods.getPublicKey(recipient).call({ from: account });\r\n                console.log(\"publickey\",recipientPublicKeyHex);\r\n                if (!recipientPublicKeyHex) {\r\n                    console.error(\"No public key found for recipient.\");\r\n                    return;\r\n                }\r\n                \r\n                const sessionKey = generateSessionKey();\r\n                console.log(\"sessionkey\",sessionKey);\r\n                const rc4 = new RC4(sessionKey);\r\n                const encryptedMessage = rc4.encrypt(message);\r\n                console.log(\"encryptedmsg\", encryptedMessage)\r\n                const encryptedSessionKey = encryptSessionKey(sessionKey, recipientPublicKeyHex);\r\n\r\n                await contract.methods.storeSessionKey(recipient, encryptedSessionKey).send({ from: account });\r\n\r\n                const gasEstimate = await contract.methods.sendMessage(recipient, encryptedMessage).estimateGas({ from: account });\r\n                await contract.methods.sendMessage(recipient, encryptedMessage).send({ from: account, gas: gasEstimate + 100000 });\r\n                alert(\"Message sent!\");\r\n                setMessage('');\r\n                setRecipient('');\r\n                fetchMessages();\r\n            } catch (error) {\r\n                console.error(\"Transaction Error:\", error);\r\n                alert(\"Transaction failed: \" + error.message);\r\n            }\r\n        } else {\r\n            alert(\"Contract not initialized.\");\r\n        }\r\n    };\r\n\r\n    const fetchMessages = async () => {\r\n        if (contract) {\r\n            try {\r\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\r\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\r\n                setSenders(uniqueSenders);\r\n            } catch (error) {\r\n                console.error(\"Error fetching messages:\", error);\r\n                alert(\"Error fetching messages: \" + error.message);\r\n            }\r\n        } else {\r\n            alert(\"Contract not initialized.\");\r\n        }\r\n    };\r\n\r\n    const fetchMessagesForSender = async (sender) => {\r\n        if (contract) {\r\n            try {\r\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\r\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\r\n\r\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\r\n                    ...msg,\r\n                    timestamp: msg.timestamp * 1000,\r\n                    direction: 'received',\r\n                }));\r\n\r\n                const formattedSentMessages = sentMessages.map(msg => ({\r\n                    ...msg,\r\n                    timestamp: msg.timestamp * 1000,\r\n                    direction: 'sent',\r\n                }));\r\n\r\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\r\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n                for (let msg of combinedMessages) {\r\n                    const sessionKey = await contract.methods.getSessionKey(sender).call({ from: account });\r\n                    const rc4 = new RC4(sessionKey);\r\n                    msg.content = rc4.decrypt(msg.content);\r\n                }\r\n\r\n                setAllMessages(combinedMessages);\r\n                setSelectedSender(sender);\r\n            } catch (error) {\r\n                console.error(\"Error fetching messages for sender:\", error);\r\n                alert(\"Error fetching messages for sender: \" + error.message);\r\n            }\r\n        } else {\r\n            alert(\"Contract not initialized.\");\r\n        }\r\n    };\r\n\r\n    const goToAddContactPage = () => {\r\n        navigate('/add-contact');\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"sidebar\">\r\n                <h3>Contacts</h3>\r\n                <h2>Welcome, {username}</h2>\r\n                <p>Your Ethereum address: {account}</p>\r\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\r\n                <ul className=\"senders-list\">\r\n                    {senders.length > 0 ? (\r\n                        senders.map((sender, index) => (\r\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\r\n                                <span>{sender}</span>\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No contacts available.</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n\r\n            <div className=\"chat-container\">\r\n                <div className=\"chat-header\">\r\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\r\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\r\n                </div>\r\n                <div className=\"chat-window\">\r\n                    <ul className=\"messages\">\r\n                        {allMessages.length > 0 ? (\r\n                            allMessages.map((msg, index) => (\r\n                                <li key={index} className={`message ${msg.direction}`}>\r\n                                    <p>{msg.content}</p>\r\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleString()}</span>\r\n                                </li>\r\n                            ))\r\n                        ) : (\r\n                            <li>No messages to display</li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"message-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={recipient}\r\n                        onChange={(e) => setRecipient(e.target.value)}\r\n                        placeholder=\"Recipient address\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Enter your message\"\r\n                    />\r\n                    <button onClick={sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// AddContactPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nconst AddContactPage = ({ web3, contract }) => {\r\n    const [showBox, setShowBox] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [recipient, setRecipient] = useState('');\r\n    const [contacts, setContacts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (contract) {\r\n            fetchContacts();\r\n        }\r\n    }, [contract]);\r\n\r\n    const fetchContacts = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const contactsData = await contract.methods.getContacts().call({ from: accounts[0] });\r\n        setContacts(contactsData);\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        const accounts = await web3.eth.getAccounts();\r\n        const encryptedAddress = web3.utils.keccak256(recipient); // Example encryption, adjust as needed\r\n        await contract.methods.addContact(name, encryptedAddress).send({ from: accounts[0] });\r\n        setName('');\r\n        setRecipient('');\r\n        setShowBox(false);\r\n        fetchContacts(); // Refresh contacts after saving\r\n    };\r\n\r\n    const toggleBox = () => {\r\n        setShowBox(!showBox);\r\n    };\r\n\r\n    const CenteredBox = ({ onClose }) => {\r\n        return (\r\n            <div className=\"overlay\">\r\n                <div className=\"box\">\r\n                    <h2>Add Contact</h2>\r\n                    <div className=\"add-contact-input-area\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            placeholder=\"Enter Name\"\r\n                            className=\"name-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"add-contact-input-area\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={recipient}\r\n                            onChange={(e) => setRecipient(e.target.value)}\r\n                            placeholder=\"Enter Recipient Ethereum Address\"\r\n                            className=\"add-contact-recipient-input\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"button-group\">\r\n                        <button onClick={handleSave} className=\"save-button\">Save</button>\r\n                        <button onClick={onClose} className=\"cancel-button\">Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"add-contact-page\">\r\n            <div className=\"chat-header\">\r\n                <h2>Contact List</h2>\r\n                <button onClick={toggleBox} className=\"addcontact-button\">Add New Contact</button>\r\n            </div>\r\n            {showBox && <CenteredBox onClose={toggleBox} />}\r\n            <div className=\"contact-list\">\r\n                {contacts.map((contact, index) => (\r\n                    <div key={index} className=\"contact-item\">\r\n                        {contact.name} - {web3.utils.toHex(contact.encryptedAddress)} {/* Adjust as necessary */}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddContactPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import the custom hook for web3 context\r\nimport Web3 from 'web3'; // Import Web3 to generate keys\r\nimport { sha256 } from 'js-sha256'; // Hash function to simulate randomness based on the address\r\nconst crypto = require('crypto');\r\n    const fs = require('fs');\r\n\r\n\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const [open, setOpen] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState(''); // New state for password\r\n    const [error, setError] = useState('');\r\n    const [isRegistered, setIsRegistered] = useState(false);\r\n    const [currentUsername, setCurrentUsername] = useState('');\r\n    const [currentAccount, setCurrentAccount] = useState('');\r\n    \r\n    const { web3, contract, account } = useWeb3(); // Access web3, contract, and account from the context\r\n    const navigate = useNavigate();\r\n    const secp256k1 = require(\"secp256k1\");\r\n    // Check if user is already registered on page load\r\n    useEffect(() => {\r\n        if (account && contract) {\r\n            checkIfRegistered();\r\n        }\r\n    }, [account, contract]);\r\n\r\n\r\n\r\n    async function generatePrivateKeyFromAddress() {\r\n        // Request access to the MetaMask account\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    \r\n        // Get the current Ethereum address from MetaMask\r\n        const accounts = await web3.eth.getAccounts();\r\n        const accountAddress = accounts[0];\r\n    \r\n        console.log(\"MetaMask Ethereum Address:\", accountAddress);\r\n    \r\n        // Use the Ethereum address as a seed for generating a private key\r\n        // Hash the address to generate a 'random' private key (this is not cryptographically secure)\r\n        const pseudoRandomPrivateKey = sha256(accountAddress); // Hash the address to simulate randomness\r\n    \r\n        // Private key is derived from the hash - ensure it is in the expected format (remove 0x)\r\n        const privateKey = `0x${pseudoRandomPrivateKey.slice(0, 64)}`; // Slice to get the correct length (32 bytes)\r\n    \r\n        console.log(\"Generated Private Key (from address):\", privateKey);\r\n    \r\n        return privateKey;    }\r\n\r\n\r\n    const checkIfRegistered = async () => {\r\n        try {\r\n            const existingUsername = await contract.methods.getUsername().call({ from: account });\r\n            if (existingUsername) {\r\n                setCurrentUsername(existingUsername);\r\n                setIsRegistered(true);\r\n                 \r\n    \r\n                 \r\n \r\n            } else {\r\n                setIsRegistered(false);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error checking registration status:\", error);\r\n            setError(\"Failed to check registration status.\");\r\n        }\r\n    };\r\n\r\n    const handleSignUpOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n  \r\n    \r\n    // Method to generate an RSA public/private key pair using the Web Crypto API\r\n// Method to generate an RSA public/private key pair using the Web Crypto API\r\nasync function generateKeys() {\r\n    // Generate an RSA key pair\r\n    const keyPair = await window.crypto.subtle.generateKey(\r\n        {\r\n            name: \"RSA-OAEP\",\r\n            modulusLength: 1024,\r\n            publicExponent: new Uint8Array([1, 0, 1]),\r\n            hash: { name: \"SHA-256\" },\r\n        },\r\n        true, // Whether the key is extractable (i.e., can be used outside the Web Crypto API)\r\n        [\"encrypt\", \"decrypt\"] // Key usages\r\n    );\r\n\r\n    // Export the public key to SPKI format\r\n    const publicKeyBuffer = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\r\n    \r\n    // Convert the ArrayBuffer to a hexadecimal string\r\n    const publicKeyHex = Array.from(new Uint8Array(publicKeyBuffer))\r\n        .map(byte => byte.toString(16).padStart(2, '0'))\r\n        .join('');\r\n\r\n    console.log(\"Generated Public Key (Hex format):\", publicKeyHex);\r\n\r\n    // Return the public key as a hexadecimal string\r\n    return publicKeyHex;\r\n}\r\n\r\n\r\nconst handleSignUpSubmit = async () => {\r\n    if (!username || !password) { // Validate username and password\r\n        setError('Username and Password are required');\r\n        return;\r\n    }\r\n    try {\r\n        // Generate the public and private keys\r\n        const publicKeyHex = await generateKeys(); // Await for the generated public key in hex format\r\n\r\n        \r\n\r\n        // Register the user on the blockchain with the username and public key\r\n        await contract.methods.registerUser(username, publicKeyHex, password).send({ from: account });\r\n\r\n        // Store the public key on the blockchain if needed\r\n        await contract.methods.updatePublicKey(publicKeyHex).send({ from: account });\r\n\r\n        setOpen(false);\r\n        navigate('/app', { state: { account, username } }); // Navigate to the main app with account and username\r\n    } catch (error) {\r\n        console.error(\"Registration error:\", error);\r\n        setError(\"Registration failed. Please try again.\");\r\n    }\r\n};\r\n\r\n\r\n    const handleLogin = async () => {\r\n        if (!password) { // Validate password\r\n            setError('Password is required for login');\r\n            return;\r\n        }\r\n        try {\r\n            console.log(\"Password entered by user:\", password);\r\n            console.log(\"before password validate\");\r\n\r\n            // Hash the password entered by the user\r\n            const hashedPassword = web3.utils.keccak256(password);\r\n    \r\n            // Print the hashed password to the console\r\n            console.log(\"Hashed password generated by user:\", hashedPassword);\r\n    \r\n            // Fetch the username associated with the account\r\n            const username = await contract.methods.getUsername().call({ from: account });\r\n            console.log(\"Username from contract:\", username);\r\n    \r\n            // Fetch the stored password hash from the smart contract for the logged-in account\r\n            const storedHashedPassword = await contract.methods.getPasswordHash(account).call();\r\n            console.log(\"Hashed password stored in the contract:\", storedHashedPassword);\r\n    \r\n            // Validate the password by comparing the hashes\r\n            const passwordValid = hashedPassword === storedHashedPassword;\r\n            console.log(\"Password valid:\", passwordValid); // This will print `true` or `false` based on comparison\r\n    \r\n            if (passwordValid) {\r\n                console.log(\"Password is valid. User login successful.\");\r\n\r\n                setCurrentUsername(username);\r\n                navigate('/app', { state: { account, username } });\r\n               \r\n                console.log(\"Final\")\r\n               \r\n    \r\n                \r\n    \r\n            } else {\r\n                setError('Invalid password');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Login error:\", error);\r\n            setError(\"Login failed. Please try again.\");\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>Welcome to the Chat App</h1>\r\n            {!isRegistered ? (\r\n                <>\r\n                    <h2>Sign Up</h2>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\r\n                    />\r\n                    <button onClick={handleSignUpSubmit}>Sign Up</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h2>Welcome Back, {currentUsername}!</h2>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter Password to Login\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\r\n                    />\r\n                    <button onClick={handleLogin}>Login</button>\r\n                </>\r\n            )}\r\n            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Error handling */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport App from './App';\r\nimport AddContactPage from './AddContactPage'; \r\nimport Home from './Home'; \r\nconst MainApp = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/\" element={<Home />} />\r\n            <Route path=\"/app\" element={<App />} />\r\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\r\n        </Routes>\r\n    );\r\n};\r\n\r\nexport default MainApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\r\nimport MainApp from './components/MainApp'; // Main App\r\nimport { Web3Provider } from './contexts/Web3Context'; // Import Web3Context\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Web3Provider>\r\n      <HashRouter>\r\n        <MainApp />\r\n      </HashRouter>\r\n    </Web3Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport MessageStoreContract from '../abis/MessageStore.json'; // Import the ABI\r\n\r\n// Create the Web3 context\r\nconst Web3Context = createContext();\r\n\r\n// Custom hook to access the Web3Context\r\nexport const useWeb3 = () => {\r\n    return useContext(Web3Context);\r\n};\r\n\r\n// Web3Provider component\r\nexport const Web3Provider = ({ children }) => {\r\n    const [web3, setWeb3] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [account, setAccount] = useState('');\r\n\r\n    useEffect(() => {\r\n        const initWeb3 = async () => {\r\n            if (window.ethereum) {\r\n                try {\r\n                    const web3Instance = new Web3(window.ethereum);\r\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n                    const accounts = await web3Instance.eth.getAccounts();\r\n                    setAccount(accounts[0]);\r\n\r\n                    const networkId = await web3Instance.eth.net.getId();\r\n                    const deployedNetwork = MessageStoreContract.networks[networkId];\r\n                    if (deployedNetwork) {\r\n                        const contractInstance = new web3Instance.eth.Contract(MessageStoreContract.abi, deployedNetwork.address);\r\n                        setWeb3(web3Instance);\r\n                        setContract(contractInstance);\r\n                    } else {\r\n                        console.error(\"Contract not deployed on this network\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Web3 initialization failed:\", error);\r\n                }\r\n            }\r\n        };\r\n\r\n        initWeb3();\r\n    }, []);\r\n\r\n    return (\r\n        <Web3Context.Provider value={{ web3, contract, account }}>\r\n            {children}\r\n        </Web3Context.Provider>\r\n    );\r\n};\r\n"],"sourceRoot":""}