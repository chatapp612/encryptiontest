{"version":3,"sources":["components/App.js","components/AddContactPage.js","components/Home.js","components/MainApp.js","index.js","contexts/Web3Context.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","RC4","key","_classCallCheck","state","j","initialize","_createClass","_toConsumableArray","map","char","charCodeAt","_ref","input","output","k","_ref2","byte","message","encrypted","process","Buffer","from","toString","encryptedMessage","encryptedBytes","decrypted","String","fromCharCode","apply","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","senders","setSenders","_useState9","_useState10","selectedSender","setSelectedSender","location","useLocation","navigate","useNavigate","_useWeb","useWeb3","contract","account","username","useEffect","fetchMessages","encryptSessionKey","sessionKey","recipientPublicKeyHex","console","error","pemKey","concat","log","buffer","crypto","publicEncrypt","padding","constants","RSA_PKCS1_PADDING","padEnvelope","sessionKeyLength","arguments","undefined","desiredLength","padded","substring","sendMessage","_ref3","_asyncToGenerator","_callee","envelope","envelopeString","paddedEnvelope","rc4","encryptedEnvelope","encryptedSessionKey","gasEstimate","_context","alert","methods","getPublicKey","randomBytes","JSON","stringify","encrypt","storeSessionKey","send","estimateGas","gas","t0","_ref4","_callee2","receivedMessages","uniqueSenders","_context2","fetchMessagesForLoggedInAccount","Set","msg","sender","fetchMessagesForSender","_ref5","_callee3","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_iterator","_step","_context3","_objectSpread","timestamp","direction","sort","b","_createForOfIteratorHelper","getSessionKey","content","decrypt","t1","_x","React","createElement","className","onClick","index","Date","toLocaleString","onChange","target","placeholder","AddContactPage","web3","showBox","setShowBox","setName","contacts","setContacts","fetchContacts","accounts","contactsData","eth","getAccounts","getContacts","handleSave","encryptedAddress","utils","keccak256","addContact","toggleBox","onClose","contact","toHex","require","Home","setOpen","setUsername","password","setPassword","setError","isRegistered","setIsRegistered","_useState11","_useState12","currentUsername","setCurrentUsername","_useState13","_useState14","checkIfRegistered","existingUsername","getUsername","generateKeys","_generateKeys","_callee5","keyPair","publicKeyBuffer","publicKeyHex","privateKeyBuffer","privateKeyHex","blob","url","link","_context5","window","subtle","generateKey","modulusLength","publicExponent","Uint8Array","hash","exportKey","publicKey","Array","padStart","join","privateKey","Blob","URL","createObjectURL","document","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleSignUpSubmit","registerUser","updatePublicKey","handleLogin","hashedPassword","_username","storedHashedPassword","passwordValid","getPasswordHash","Fragment","style","color","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","Web3Provider","HashRouter","getElementById","Web3Context","createContext","useContext","children","setWeb3","setContract","setAccount","web3Instance","networkId","deployedNetwork","contractInstance","ethereum","Web3","request","net","getId","MessageStoreContract","networks","Contract","abi","address","initWeb3","Provider"],"mappings":"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","file":"static/js/main.9d3a1517.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js';\nimport crypto from 'crypto';\n\nclass RC4 {\n    constructor(key) {\n        this.key = key;\n        this.state = [];\n        this.i = 0;\n        this.j = 0;\n        this.initialize();\n    }\n\n    initialize() {\n        const key = [...this.key].map((char) => char.charCodeAt(0));\n        for (let i = 0; i < 256; i++) this.state[i] = i;\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + this.state[i] + key[i % key.length]) % 256;\n            [this.state[i], this.state[j]] = [this.state[j], this.state[i]];\n        }\n    }\n\n    process(input) {\n        const output = [];\n        for (let k = 0; k < input.length; k++) {\n            this.i = (this.i + 1) % 256;\n            this.j = (this.j + this.state[this.i]) % 256;\n            [this.state[this.i], this.state[this.j]] = [this.state[this.j], this.state[this.i]];\n            const byte = this.state[(this.state[this.i] + this.state[this.j]) % 256];\n            output.push(input[k] ^ byte);\n        }\n        return output;\n    }\n\n    encrypt(message) {\n        const input = [...message].map((char) => char.charCodeAt(0));\n        const encrypted = this.process(input);\n        return Buffer.from(encrypted).toString('hex');\n    }\n\n    decrypt(encryptedMessage) {\n        const encryptedBytes = Buffer.from(encryptedMessage, 'hex');\n        const decrypted = this.process([...encryptedBytes]);\n        return String.fromCharCode(...decrypted);\n    }\n}\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const { contract, account } = useWeb3();\n    const username = (location.state && location.state.username) ? location.state.username : 'Guest';\n\n    useEffect(() => {\n        if (contract && account) {\n            fetchMessages();\n        }\n    }, [contract, account]);\n\n    const generateSessionKey = () => {\n        return crypto.randomBytes(16).toString('hex');\n    };\n\n    const encryptSessionKey = (sessionKey, recipientPublicKeyHex) => {\n        try {\n            if (!recipientPublicKeyHex) {\n                console.error(\"Recipient public key is null or undefined.\");\n                return;\n            }\n    \n            const pemKey = `-----BEGIN PUBLIC KEY-----\\n${Buffer.from(recipientPublicKeyHex, 'hex').toString('base64')}\\n-----END PUBLIC KEY-----`;\n            console.log(pemKey);\n            const buffer = Buffer.from(sessionKey, 'utf-8');\n            const encrypted = crypto.publicEncrypt(\n                { key: pemKey, padding: crypto.constants.RSA_PKCS1_PADDING },\n                buffer\n            );\n            return encrypted.toString('hex');\n        } catch (error) {\n            console.error(\"Error in encrypting session key:\", error);\n        }\n    };\n    \n// Function to pad the envelope to ensure a constant size\nconst padEnvelope = (message, sessionKeyLength=32) => {\n    const desiredLength = message.length+ sessionKeyLength; // Choose a constant size for the envelope\n    let padded = message;\n\n    // Pad with spaces or a specific character if the string is shorter than the desired length\n    while (padded.length < desiredLength) {\n        padded += ' '; // You can pad with spaces or any other character\n    }\n\n    return padded.substring(0, desiredLength); // Ensure it does not exceed the desired length\n};\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n    \n        if (contract) {\n            try {\n                // Fetch recipient's public key\n                const recipientPublicKeyHex = await contract.methods.getPublicKey(recipient).call({ from: account });\n                console.log(\"Public Key:\", recipientPublicKeyHex);\n    \n                if (!recipientPublicKeyHex) {\n                    console.error(\"No public key found for recipient.\");\n                    return;\n                }\n    \n                // Generate a new session key for encryption\n                const sessionKey = generateSessionKey();\n                console.log(\"Session Key:\", sessionKey);\n    \n                // Create an envelope structure\n                const envelope = {\n                    sessionKey: sessionKey, // Add session key to the envelope\n                    message: message, // Actual message to be encrypted\n                };\n    \n                // Convert the envelope to a string (JSON format)\n                const envelopeString = JSON.stringify(envelope);\n                const paddedEnvelope = padEnvelope(message,envelopeString); // Ensure constant size\n    \n                // Encrypt the envelope with RC4 using the session key\n                const rc4 = new RC4(sessionKey);\n                const encryptedEnvelope = rc4.encrypt(paddedEnvelope);\n                console.log(\"Encrypted Envelope:\", encryptedEnvelope);\n    \n                // Encrypt the session key with the recipient's public key\n                const encryptedSessionKey = encryptSessionKey(sessionKey, recipientPublicKeyHex);\n    \n                // Store the encrypted session key on-chain\n                await contract.methods.storeSessionKey(recipient, encryptedSessionKey).send({ from: account });\n    \n                // Send the encrypted envelope as the message\n                const gasEstimate = await contract.methods.sendMessage(recipient, encryptedEnvelope).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, encryptedEnvelope).send({ from: account, gas: gasEstimate + 100000 });\n    \n                alert(\"Message sent successfully!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages();\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n\n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'received',\n                }));\n\n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'sent',\n                }));\n\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n\n                for (let msg of combinedMessages) {\n                    const sessionKey = await contract.methods.getSessionKey(sender).call({ from: account });\n                    const rc4 = new RC4(sessionKey);\n                    msg.content = rc4.decrypt(msg.content);\n                }\n\n                setAllMessages(combinedMessages);\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const goToAddContactPage = () => {\n        navigate('/add-contact');\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <h2>Welcome, {username}</h2>\n                <p>Your Ethereum address: {account}</p>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleString()}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages to display</li>\n                        )}\n                    </ul>\n                </div>\n\n                <div className=\"message-form\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Recipient address\"\n                    />\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter your message\"\n                    />\n                    <button onClick={sendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// AddContactPage.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst AddContactPage = ({ web3, contract }) => {\n    const [showBox, setShowBox] = useState(false);\n    const [name, setName] = useState('');\n    const [recipient, setRecipient] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    useEffect(() => {\n        if (contract) {\n            fetchContacts();\n        }\n    }, [contract]);\n\n    const fetchContacts = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const contactsData = await contract.methods.getContacts().call({ from: accounts[0] });\n        setContacts(contactsData);\n    };\n\n    const handleSave = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const encryptedAddress = web3.utils.keccak256(recipient); // Example encryption, adjust as needed\n        await contract.methods.addContact(name, encryptedAddress).send({ from: accounts[0] });\n        setName('');\n        setRecipient('');\n        setShowBox(false);\n        fetchContacts(); // Refresh contacts after saving\n    };\n\n    const toggleBox = () => {\n        setShowBox(!showBox);\n    };\n\n    const CenteredBox = ({ onClose }) => {\n        return (\n            <div className=\"overlay\">\n                <div className=\"box\">\n                    <h2>Add Contact</h2>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Enter Name\"\n                            className=\"name-input\"\n                        />\n                    </div>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={recipient}\n                            onChange={(e) => setRecipient(e.target.value)}\n                            placeholder=\"Enter Recipient Ethereum Address\"\n                            className=\"add-contact-recipient-input\"\n                        />\n                    </div>\n                    <div className=\"button-group\">\n                        <button onClick={handleSave} className=\"save-button\">Save</button>\n                        <button onClick={onClose} className=\"cancel-button\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"add-contact-page\">\n            <div className=\"chat-header\">\n                <h2>Contact List</h2>\n                <button onClick={toggleBox} className=\"addcontact-button\">Add New Contact</button>\n            </div>\n            {showBox && <CenteredBox onClose={toggleBox} />}\n            <div className=\"contact-list\">\n                {contacts.map((contact, index) => (\n                    <div key={index} className=\"contact-item\">\n                        {contact.name} - {web3.utils.toHex(contact.encryptedAddress)} {/* Adjust as necessary */}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default AddContactPage;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import the custom hook for web3 context\nimport Web3 from 'web3'; // Import Web3 to generate keys\nimport { sha256 } from 'js-sha256'; // Hash function to simulate randomness based on the address\nconst crypto = require('crypto');\n    const fs = require('fs');\n\n\n\n\n\nconst Home = () => {\n    const [open, setOpen] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState(''); // New state for password\n    const [error, setError] = useState('');\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [currentUsername, setCurrentUsername] = useState('');\n    const [currentAccount, setCurrentAccount] = useState('');\n    \n    const { web3, contract, account } = useWeb3(); // Access web3, contract, and account from the context\n    const navigate = useNavigate();\n    const secp256k1 = require(\"secp256k1\");\n    // Check if user is already registered on page load\n    useEffect(() => {\n        if (account && contract) {\n            checkIfRegistered();\n        }\n    }, [account, contract]);\n\n\n\n    async function generatePrivateKeyFromAddress() {\n        // Request access to the MetaMask account\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\n    \n        // Get the current Ethereum address from MetaMask\n        const accounts = await web3.eth.getAccounts();\n        const accountAddress = accounts[0];\n    \n        console.log(\"MetaMask Ethereum Address:\", accountAddress);\n    \n        // Use the Ethereum address as a seed for generating a private key\n        // Hash the address to generate a 'random' private key (this is not cryptographically secure)\n        const pseudoRandomPrivateKey = sha256(accountAddress); // Hash the address to simulate randomness\n    \n        // Private key is derived from the hash - ensure it is in the expected format (remove 0x)\n        const privateKey = `0x${pseudoRandomPrivateKey.slice(0, 64)}`; // Slice to get the correct length (32 bytes)\n    \n        console.log(\"Generated Private Key (from address):\", privateKey);\n    \n        return privateKey;    }\n\n\n    const checkIfRegistered = async () => {\n        try {\n            const existingUsername = await contract.methods.getUsername().call({ from: account });\n            if (existingUsername) {\n                setCurrentUsername(existingUsername);\n                setIsRegistered(true);\n                 \n    \n                 \n \n            } else {\n                setIsRegistered(false);\n            }\n        } catch (error) {\n            console.error(\"Error checking registration status:\", error);\n            setError(\"Failed to check registration status.\");\n        }\n    };\n\n    const handleSignUpOpen = () => {\n        setOpen(true);\n    };\n\n  \n    \n    // Method to generate an RSA public/private key pair using the Web Crypto API\n// Method to generate an RSA public/private key pair using the Web Crypto API\nasync function generateKeys() {\n    // Generate an RSA key pair\n    const keyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 1024,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: { name: \"SHA-256\" },\n        },\n        true, // Whether the key is extractable (i.e., can be used outside the Web Crypto API)\n        [\"encrypt\", \"decrypt\"] // Key usages\n    );\n\n    // Export the public key to SPKI format\n    const publicKeyBuffer = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n    \n    // Convert the ArrayBuffer to a hexadecimal string\n    const publicKeyHex = Array.from(new Uint8Array(publicKeyBuffer))\n        .map(byte => byte.toString(16).padStart(2, '0'))\n        .join('');\n\n    console.log(\"Generated Public Key (Hex format):\", publicKeyHex);\n    const privateKeyBuffer = await window.crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    \n    // Convert the ArrayBuffer to a hexadecimal string\n    const privateKeyHex = Array.from(new Uint8Array(privateKeyBuffer))\n        .map(byte => byte.toString(16).padStart(2, '0'))\n        .join('');\n    const blob = new Blob([privateKeyHex], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'private_key.txt';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url); // Release the URL object after download\n\n\n        // Return the public key as a hexadecimal string\n\n    return publicKeyHex;\n}\n\n\nconst handleSignUpSubmit = async () => {\n    if (!username || !password) { // Validate username and password\n        setError('Username and Password are required');\n        return;\n    }\n    try {\n        // Generate the public and private keys\n        const publicKeyHex = await generateKeys(); // Await for the generated public key in hex format\n\n        \n\n        // Register the user on the blockchain with the username and public key\n        await contract.methods.registerUser(username, publicKeyHex, password).send({ from: account });\n\n        // Store the public key on the blockchain if needed\n        await contract.methods.updatePublicKey(publicKeyHex).send({ from: account });\n\n        setOpen(false);\n        navigate('/app', { state: { account, username } }); // Navigate to the main app with account and username\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        setError(\"Registration failed. Please try again.\");\n    }\n};\n\n\n    const handleLogin = async () => {\n        if (!password) { // Validate password\n            setError('Password is required for login');\n            return;\n        }\n        try {\n            console.log(\"Password entered by user:\", password);\n            console.log(\"before password validate\");\n\n            // Hash the password entered by the user\n            const hashedPassword = web3.utils.keccak256(password);\n    \n            // Print the hashed password to the console\n            console.log(\"Hashed password generated by user:\", hashedPassword);\n    \n            // Fetch the username associated with the account\n            const username = await contract.methods.getUsername().call({ from: account });\n            console.log(\"Username from contract:\", username);\n    \n            // Fetch the stored password hash from the smart contract for the logged-in account\n            const storedHashedPassword = await contract.methods.getPasswordHash(account).call();\n            console.log(\"Hashed password stored in the contract:\", storedHashedPassword);\n    \n            // Validate the password by comparing the hashes\n            const passwordValid = hashedPassword === storedHashedPassword;\n            console.log(\"Password valid:\", passwordValid); // This will print `true` or `false` based on comparison\n    \n            if (passwordValid) {\n                console.log(\"Password is valid. User login successful.\");\n\n                setCurrentUsername(username);\n                navigate('/app', { state: { account, username } });\n               \n                console.log(\"Final\")\n               \n    \n                \n    \n            } else {\n                setError('Invalid password');\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            setError(\"Login failed. Please try again.\");\n        }\n    };\n    return (\n        <div>\n            <h1>Welcome to the Chat App</h1>\n            {!isRegistered ? (\n                <>\n                    <h2>Sign Up</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleSignUpSubmit}>Sign Up</button>\n                </>\n            ) : (\n                <>\n                    <h2>Welcome Back, {currentUsername}!</h2>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter Password to Login\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleLogin}>Login</button>\n                </>\n            )}\n            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Error handling */}\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport App from './App';\nimport AddContactPage from './AddContactPage'; \nimport Home from './Home'; \nconst MainApp = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/app\" element={<App />} />\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\n        </Routes>\n    );\n};\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\nimport MainApp from './components/MainApp'; // Main App\nimport { Web3Provider } from './contexts/Web3Context'; // Import Web3Context\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <HashRouter>\n        <MainApp />\n      </HashRouter>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json'; // Import the ABI\n\n// Create the Web3 context\nconst Web3Context = createContext();\n\n// Custom hook to access the Web3Context\nexport const useWeb3 = () => {\n    return useContext(Web3Context);\n};\n\n// Web3Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            if (window.ethereum) {\n                try {\n                    const web3Instance = new Web3(window.ethereum);\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n\n                    const networkId = await web3Instance.eth.net.getId();\n                    const deployedNetwork = MessageStoreContract.networks[networkId];\n                    if (deployedNetwork) {\n                        const contractInstance = new web3Instance.eth.Contract(MessageStoreContract.abi, deployedNetwork.address);\n                        setWeb3(web3Instance);\n                        setContract(contractInstance);\n                    } else {\n                        console.error(\"Contract not deployed on this network\");\n                    }\n                } catch (error) {\n                    console.error(\"Web3 initialization failed:\", error);\n                }\n            }\n        };\n\n        initWeb3();\n    }, []);\n\n    return (\n        <Web3Context.Provider value={{ web3, contract, account }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n"],"sourceRoot":""}