{"version":3,"sources":["components/App.js","contexts/Web3Context.js","components/AddContactPage.js","components/Home.js","components/MainApp.js","index.js"],"names":["RC4","constructor","key","this","state","i","j","initialize","map","char","charCodeAt","length","process","input","output","k","byte","push","encrypt","message","encrypted","Buffer","from","toString","decrypt","encryptedMessage","encryptedBytes","decrypted","String","fromCharCode","App","recipient","setRecipient","useState","setMessage","allMessages","setAllMessages","senders","setSenders","selectedSender","setSelectedSender","location","useLocation","navigate","useNavigate","contract","account","useWeb3","username","useEffect","fetchMessages","async","receivedMessages","methods","fetchMessagesForLoggedInAccount","call","uniqueSenders","Set","msg","sender","error","console","alert","React","createElement","className","onClick","index","fetchMessagesForSender","sentMessages","formattedReceivedMessages","timestamp","direction","formattedSentMessages","combinedMessages","sort","a","b","sessionKeyHex1","localStorage","getItem","log","content","rc4","goToAddContactPage","Date","toLocaleString","type","value","onChange","e","target","placeholder","sessionKeyHex","recipientPublicKeyHex","getPublicKey","privateKeyHex","Error","recipientPublicKey","sodium","from_hex","privateKey","rawSecret","crypto_scalarmult","to_hex","randombytes_buf","info","from_string","derivedKey","crypto_kdf_derive_from_key","key1","key2","setItem","deriveEncryptionKey","encryptedmessage","gasEstimate","sendMessage","estimateGas","send","gas","Web3Context","createContext","useContext","Web3Provider","_ref","children","web3","setWeb3","setContract","setAccount","window","ethereum","web3Instance","Web3","request","method","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","MessageStoreContract","networks","contractInstance","Contract","abi","address","initWeb3","Provider","AddContactPage","showBox","setShowBox","name","setName","contacts","setContacts","fetchContacts","contactsData","getContacts","handleSave","encryptedAddress","utils","keccak256","addContact","toggleBox","CenteredBox","_ref2","onClose","contact","toHex","require","Home","open","setOpen","setUsername","password","setPassword","setError","isRegistered","setIsRegistered","currentUsername","setCurrentUsername","currentAccount","setCurrentAccount","checkIfRegistered","existingUsername","getUsername","Fragment","hashedPassword","storedHashedPassword","getPasswordHash","passwordValid","publicKeyHex","ready","keyPair","crypto_box_keypair","publicKey","blob","Blob","url","URL","createObjectURL","link","document","href","download","body","appendChild","click","removeChild","revokeObjectURL","generateKeys","registerUser","updatePublicKey","style","color","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","HashRouter","getElementById"],"mappings":"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","file":"static/js/main.bcf6ca54.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js';\nimport crypto from 'crypto';\nimport sodium from \"libsodium-wrappers\";\n\nclass RC4 {\n    constructor(key) {\n        this.key = key;\n        this.state = [];\n        this.i = 0;\n        this.j = 0;\n        this.initialize();\n    }\n\n    initialize() {\n        const key = [...this.key].map((char) => char.charCodeAt(0));\n        for (let i = 0; i < 256; i++) this.state[i] = i;\n        let j = 0;\n        for (let i = 0; i < 256; i++) {\n            j = (j + this.state[i] + key[i % key.length]) % 256;\n            [this.state[i], this.state[j]] = [this.state[j], this.state[i]];\n        }\n    }\n\n    process(input) {\n        const output = [];\n        for (let k = 0; k < input.length; k++) {\n            this.i = (this.i + 1) % 256;\n            this.j = (this.j + this.state[this.i]) % 256;\n            [this.state[this.i], this.state[this.j]] = [this.state[this.j], this.state[this.i]];\n            const byte = this.state[(this.state[this.i] + this.state[this.j]) % 256];\n            output.push(input[k] ^ byte);\n        }\n        return output;\n    }\n\n    encrypt(message) {\n        const input = [...message].map((char) => char.charCodeAt(0));\n        const encrypted = this.process(input);\n        return Buffer.from(encrypted).toString('hex');\n    }\n\n    decrypt(encryptedMessage) {\n        const encryptedBytes = Buffer.from(encryptedMessage, 'hex');\n        const decrypted = this.process([...encryptedBytes]);\n        return String.fromCharCode(...decrypted);\n    }\n}\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n    const { contract, account } = useWeb3();\n    const username = (location.state && location.state.username) ? location.state.username : 'Guest';\n\n    useEffect(() => {\n        if (contract && account) {\n            fetchMessages();\n        }\n    }, [contract, account]);\n\n    \n    \n  //******************************************************************************************************************************************* */  \n  const deriveEncryptionKey = async () => {\n    try {\n        console.log(\"indise derivekeyfunc\");\n        // Fetch the recipient's public key from the smart contract using the recipient state\n        const recipientPublicKeyHex = await contract.methods.getPublicKey(recipient).call({ from: account });\n        console.log(\"public key of recipient:\",recipientPublicKeyHex);\n        // Retrieve your private key from local storage using your account address\n        const privateKeyHex = localStorage.getItem(`privateKey-${account}`);\nconsole.log(\"my pvt key:\",privateKeyHex);\n        if (!privateKeyHex) {\n            throw new Error(\"Private key not found in localStorage.\");\n        }\n\n        // Convert hex keys to Uint8Array\n        const recipientPublicKey = sodium.from_hex(recipientPublicKeyHex);\n        \n        const privateKey = sodium.from_hex(privateKeyHex);\n        console.log(\"converted pvt key from hex to uint8\",privateKey);\n        // Calculate the shared secret using your private key and the recipient's public key\n        const rawSecret = sodium.crypto_scalarmult(privateKey, recipientPublicKey);\n\n        console.log(\"Derived Shared Secret (Hex format):\", sodium.to_hex(rawSecret));\n\n        // Set a salt (can be a fixed value or a random value, depending on your application)\n        const salt = sodium.randombytes_buf(32); // Using 32 bytes of random data as salt\n        \n        // Set the info string (can be \"encryption\", \"authentication\", or any context)\n        const info = sodium.from_string('encryption');\n        console.log(\"info\",typeof(info))\n        console.log(\"raw secret type:\",rawSecret);\n\n\n\n        const derivedKey = sodium.crypto_kdf_derive_from_key(32, info, rawSecret);\n\nconsole.log(\"Derived Encryption Key (Hex format):\", sodium.to_hex(derivedKey));\n        \n\n        const key1 = `${account}_${recipient}`;\n        const key2 = `${recipient}_${account}`;\n    \n        // Store the derived key in local storage for both combinations\n        localStorage.setItem(key1, sodium.to_hex(derivedKey));\n        localStorage.setItem(key2, sodium.to_hex(derivedKey));\n    \n        console.log(`Derived encryption key stored for ${key1} and ${key2}`);\n\n\n        return sodium.to_hex(derivedKey); // Return the derived encryption key\n    } catch (error) {\n        console.error(\"Error deriving encryption key:\", error);\n    }\n};\n\n\n  \n\n  //******************************************************************************************************************************************* */  \n\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n    \n        if (contract) {\n            try {\n                console.log(\"in send msg\");\n\n\n              \n            let sessionKeyHex =  localStorage.getItem(`${account}_${recipient}`) ||\n            localStorage.getItem(`${recipient}_${account}`);\n\n\n\n            if (!sessionKeyHex) {\n                console.log(\"Session key not found, deriving a new one...\");\n                sessionKeyHex = await deriveEncryptionKey();\n                \n            \n            }\n                const rc4 = new RC4(sessionKeyHex);\n                const encryptedmessage = rc4.encrypt(message);\n\n                \n                const gasEstimate = await contract.methods.sendMessage(recipient, encryptedmessage).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, encryptedmessage).send({ from: account, gas: gasEstimate + 100000 });\n    \n                alert(\"Message sent successfully!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages();\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n\n\n\n\n    \n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'received',\n                }));\n\n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'sent',\n                }));\n\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n\n                for (let msg of combinedMessages) {\n                    let sessionKeyHex1 = localStorage.getItem(`${account}_${recipient}`) ||\n                    localStorage.getItem(`${recipient}_${account}`);\n        \n        \n                    \n                        // For all messages, decrypt as usual\n                       console.log(\"encrypted msg that is fetched from block\", msg.content);\n                        const rc4 = new RC4(sessionKeyHex1);\n                        // Decrypt the content\n                        msg.content = rc4.decrypt(msg.content);\n                        console.log(\"message content decrpted in plaintext\", msg.content);\n                    \n                    \n                }\n\n                setAllMessages(combinedMessages);\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n\n\n\n    const goToAddContactPage = () => {\n        navigate('/add-contact');\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <h2>Welcome, {username}</h2>\n                <p>Your Ethereum address: {account}</p>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleString()}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages to display</li>\n                        )}\n                    </ul>\n                </div>\n\n                <div className=\"message-form\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Recipient address\"\n                    />\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter your message\"\n                    />\n                    <button onClick={sendMessage}>Send</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json'; // Import the ABI\n\n// Create the Web3 context\nconst Web3Context = createContext();\n\n// Custom hook to access the Web3Context\nexport const useWeb3 = () => {\n    return useContext(Web3Context);\n};\n\n// Web3Provider component\nexport const Web3Provider = ({ children }) => {\n    const [web3, setWeb3] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n\n    useEffect(() => {\n        const initWeb3 = async () => {\n            if (window.ethereum) {\n                try {\n                    const web3Instance = new Web3(window.ethereum);\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    const accounts = await web3Instance.eth.getAccounts();\n                    setAccount(accounts[0]);\n\n                    const networkId = await web3Instance.eth.net.getId();\n                    const deployedNetwork = MessageStoreContract.networks[networkId];\n                    if (deployedNetwork) {\n                        const contractInstance = new web3Instance.eth.Contract(MessageStoreContract.abi, deployedNetwork.address);\n                        setWeb3(web3Instance);\n                        setContract(contractInstance);\n                    } else {\n                        console.error(\"Contract not deployed on this network\");\n                    }\n                } catch (error) {\n                    console.error(\"Web3 initialization failed:\", error);\n                }\n            }\n        };\n\n        initWeb3();\n    }, []);\n\n    return (\n        <Web3Context.Provider value={{ web3, contract, account }}>\n            {children}\n        </Web3Context.Provider>\n    );\n};\n","// AddContactPage.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst AddContactPage = ({ web3, contract }) => {\n    const [showBox, setShowBox] = useState(false);\n    const [name, setName] = useState('');\n    const [recipient, setRecipient] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    useEffect(() => {\n        if (contract) {\n            fetchContacts();\n        }\n    }, [contract]);\n\n    const fetchContacts = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const contactsData = await contract.methods.getContacts().call({ from: accounts[0] });\n        setContacts(contactsData);\n    };\n\n    const handleSave = async () => {\n        const accounts = await web3.eth.getAccounts();\n        const encryptedAddress = web3.utils.keccak256(recipient); // Example encryption, adjust as needed\n        await contract.methods.addContact(name, encryptedAddress).send({ from: accounts[0] });\n        setName('');\n        setRecipient('');\n        setShowBox(false);\n        fetchContacts(); // Refresh contacts after saving\n    };\n\n    const toggleBox = () => {\n        setShowBox(!showBox);\n    };\n\n    const CenteredBox = ({ onClose }) => {\n        return (\n            <div className=\"overlay\">\n                <div className=\"box\">\n                    <h2>Add Contact</h2>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                            placeholder=\"Enter Name\"\n                            className=\"name-input\"\n                        />\n                    </div>\n                    <div className=\"add-contact-input-area\">\n                        <input\n                            type=\"text\"\n                            value={recipient}\n                            onChange={(e) => setRecipient(e.target.value)}\n                            placeholder=\"Enter Recipient Ethereum Address\"\n                            className=\"add-contact-recipient-input\"\n                        />\n                    </div>\n                    <div className=\"button-group\">\n                        <button onClick={handleSave} className=\"save-button\">Save</button>\n                        <button onClick={onClose} className=\"cancel-button\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"add-contact-page\">\n            <div className=\"chat-header\">\n                <h2>Contact List</h2>\n                <button onClick={toggleBox} className=\"addcontact-button\">Add New Contact</button>\n            </div>\n            {showBox && <CenteredBox onClose={toggleBox} />}\n            <div className=\"contact-list\">\n                {contacts.map((contact, index) => (\n                    <div key={index} className=\"contact-item\">\n                        {contact.name} - {web3.utils.toHex(contact.encryptedAddress)} {/* Adjust as necessary */}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default AddContactPage;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useWeb3 } from '../contexts/Web3Context.js'; // Import the custom hook for web3 context\nimport Web3 from 'web3'; // Import Web3 to generate keys\nimport { sha256 } from 'js-sha256'; // Hash function to simulate randomness based on the address\nimport sodium from \"libsodium-wrappers\";\n\n\nconst crypto = require('crypto');\n    const fs = require('fs');\n\n\n\n\nconst Home = () => {\n    const [open, setOpen] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState(''); // New state for password\n    const [error, setError] = useState('');\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [currentUsername, setCurrentUsername] = useState('');\n    const [currentAccount, setCurrentAccount] = useState('');\n    \n    const { web3, contract, account } = useWeb3(); // Access web3, contract, and account from the context\n    const navigate = useNavigate();\n    const secp256k1 = require(\"secp256k1\");\n    // Check if user is already registered on page load\n    useEffect(() => {\n        if (account && contract) {\n            checkIfRegistered();\n        }\n    }, [account, contract]);\n\n\n\n\n\n    const checkIfRegistered = async () => {\n        try {\n            const existingUsername = await contract.methods.getUsername().call({ from: account });\n            if (existingUsername) {\n                setCurrentUsername(existingUsername);\n                setIsRegistered(true);\n                 \n    \n                 \n \n            } else {\n                setIsRegistered(false);\n            }\n        } catch (error) {\n            console.error(\"Error checking registration status:\", error);\n            setError(\"Failed to check registration status.\");\n        }\n    };\n\n    const handleSignUpOpen = () => {\n        setOpen(true);\n    };\n\n  \n    \n    // Method to generate an RSA public/private key pair using the Web Crypto API\nconst generateKeys = async () => {\n    // Initialize Sodium\n    await sodium.ready;\n\n    const keyPair = sodium.crypto_box_keypair();\nconsole.log(\"keypairs generated\");\n    // Convert public and private keys to hexadecimal\n    const publicKeyHex = sodium.to_hex(keyPair.publicKey);\n    const privateKeyHex = sodium.to_hex(keyPair.privateKey);\n\n    console.log(\"Generated Public Key (Hex format):\", publicKeyHex);\n    console.log(\"Generated Private Key (Hex format):\", privateKeyHex);\n    console.log(\"my public keytype:\",typeof(publicKeyHex));\n\n    // Store private key in local storage, using the account address as the key\n    localStorage.setItem(`privateKey-${account}`, privateKeyHex);\n    console.log(`Private key for ${account} stored in local storage!`);\n\n    // Provide a download option for the private key\n    const blob = new Blob([privateKeyHex], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"private_key.txt\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url); // Release the URL object after download\n\n    return publicKeyHex; // Return the public key\n};\n\nconst handleSignUpSubmit = async () => {\n    if (!username || !password) { // Validate username and password\n        setError('Username and Password are required');\n        return;\n    }\n    try {\n        // Generate the public and private keys\n        const publicKeyHex = await generateKeys(); // Await for the generated public key in hex format\n        \n\n        // Register the user on the blockchain with the username and public key\n        await contract.methods.registerUser(username, publicKeyHex, password).send({ from: account });\n        // Store the public key on the blockchain if needed\n        await contract.methods.updatePublicKey(publicKeyHex).send({ from: account });\n        console.log(\"public key stored on block\");\n\n        setOpen(false);\n        navigate('/app', { state: { account, username } }); // Navigate to the main app with account and username\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        setError(\"Registration failed. Please try again.\");\n    }\n};\n\n\n    const handleLogin = async () => {\n        if (!password) { // Validate password\n            setError('Password is required for login');\n            return;\n        }\n        try {\n            console.log(\"Password entered by user:\", password);\n            console.log(\"before password validate\");\n\n            // Hash the password entered by the user\n            const hashedPassword = web3.utils.keccak256(password);\n    \n            // Print the hashed password to the console\n            console.log(\"Hashed password generated by user:\", hashedPassword);\n    \n            // Fetch the username associated with the account\n            const username = await contract.methods.getUsername().call({ from: account });\n            console.log(\"Username from contract:\", username);\n    \n            // Fetch the stored password hash from the smart contract for the logged-in account\n            const storedHashedPassword = await contract.methods.getPasswordHash(account).call();\n            console.log(\"Hashed password stored in the contract:\", storedHashedPassword);\n    \n            // Validate the password by comparing the hashes\n            const passwordValid = hashedPassword === storedHashedPassword;\n            console.log(\"Password valid:\", passwordValid); // This will print `true` or `false` based on comparison\n    \n            if (passwordValid) {\n                console.log(\"Password is valid. User login successful.\");\n\n                setCurrentUsername(username);\n                navigate('/app', { state: { account, username } });\n               \n                console.log(\"Final\")\n               \n    \n                \n    \n            } else {\n                setError('Invalid password');\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            setError(\"Login failed. Please try again.\");\n        }\n    };\n    return (\n        <div>\n            <h1>Welcome to the Chat App</h1>\n            {!isRegistered ? (\n                <>\n                    <h2>Sign Up</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <input\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleSignUpSubmit}>Sign Up</button>\n                </>\n            ) : (\n                <>\n                    <h2>Welcome Back, {currentUsername}!</h2>\n                    <input\n                        type=\"password\"\n                        placeholder=\"Enter Password to Login\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)} // Bind password input\n                    />\n                    <button onClick={handleLogin}>Login</button>\n                </>\n            )}\n            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Error handling */}\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport App from './App';\nimport AddContactPage from './AddContactPage'; \nimport Home from './Home'; \nconst MainApp = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/app\" element={<App />} />\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\n        </Routes>\n    );\n};\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\nimport MainApp from './components/MainApp'; // Main App\nimport { Web3Provider } from './contexts/Web3Context'; // Import Web3Context\n\nReactDOM.render(\n  <React.StrictMode>\n    <Web3Provider>\n      <HashRouter>\n        <MainApp />\n      </HashRouter>\n    </Web3Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}